name: "github-php-build"
on: 
  schedule:
  - cron: "0 0 * * *"
  # if needed to run manually, comment the 2 line above and uncomment this one
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: 'dro-oci-dev-local'
      IMAGE_NAME: 'php-demo:${{ github.run_number }}'
    permissions:
      id-token: write
      contents: read
      actions: read 
      attestations: write    
      packages: write
    # Here we install all the tools : docker buildx, QEMU, JFrog CLI, PHP - Composer
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Install prerequisites
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
# Here we leverage the Github / Jfrog OIDC integration capabilities
# Note that no long lived credentials is used, only hostname and project key
# See https://jfrog.com/blog/secure-access-development-jfrog-github-oidc/
      - name: Setup JFrog CLI
        id: setup-cli
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ vars.JF_HOST }}/
          JF_PROJECT: ${{ vars.JF_PROJECT_KEY }}
        with:
            oidc-provider-name: davidro-github-integration
            oidc-audience: davidro-github
      - name: Composer Installation
        id: setup-composer-php
        uses: php-actions/composer@v6
        with:
            php_version: latest
            version: latest
            args: "--prefer-dist --optimize-autoloader"
        env:
          COMPOSER_AUTH: '{"http-basic": {"${{vars.JF_HOST}}": {"username": "${{steps.setup-cli.outputs.oidc-user}}","password": "${{steps.setup-cli.outputs.oidc-token}}"}}}'
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_HOST }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
        # docker image build
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
            push: true
            provenance: false
            platforms:
              - linux/amd64
              - linux/arm64
              - linux/arm64/v7
            tags: ${{ vars.JF_HOST }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
      - name: Docker Scan
        id: docker-scan
        run: |  
          jf rt bce ${{ env.JFROG_CLI_BUILD_NAME }} $GITHUB_RUN_NUMBER 
          jf rt bag ${{ env.JFROG_CLI_BUILD_NAME }} $GITHUB_RUN_NUMBER
          echo "digest=$(docker images --no-trunc --quiet ${{ vars.JF_HOST }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }})" >> $GITHUB_OUTPUT
          docker pull ${{ vars.JF_HOST }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
          jf docker scan ${{ vars.JF_HOST }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
      - name: Publish build info & scan build
        id: publish-build  
        env:
          JFROG_CLI_BUILD_NAME: 'gh-php-demo'
          JF_URL: https://${{ vars.JF_HOST }}/
          JF_PROJECT: ${{ vars.JF_PROJECT_KEY }}
        run: |
           echo ${{ vars.JF_HOST }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.ImageID }} > ./image-details.txt
           jf rt bdc ${{ env.DOCKER_REPO }} --image-file ./image-details.txt --build-name $JFROG_CLI_BUILD_NAME --build-number $GITHUB_RUN_NUMBER
           jf rt bp $JFROG_CLI_BUILD_NAME $GITHUB_RUN_NUMBER
           jf rt bs $JFROG_CLI_BUILD_NAME $GITHUB_RUN_NUMBER
